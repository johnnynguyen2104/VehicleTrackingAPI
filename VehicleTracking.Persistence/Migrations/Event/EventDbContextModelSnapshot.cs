// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracking.Persistence;

namespace VehicleTracking.Persistence.Migrations.Event
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VehicleTracking.Domain.EventEntities.TrackingPointSnapshots", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StartPointId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDateTime");

                    b.Property<string>("VehicleReferencedCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StartPointId")
                        .IsUnique();

                    b.ToTable("TrackingPointSnapshots");
                });

            modelBuilder.Entity("VehicleTracking.Domain.EventEntities.TrackingPoints", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("TrackingPoints");
                });

            modelBuilder.Entity("VehicleTracking.Domain.EventEntities.TrackingPointSnapshots", b =>
                {
                    b.HasOne("VehicleTracking.Domain.EventEntities.TrackingPoints", "StartPoint")
                        .WithOne("SnapshotPoint")
                        .HasForeignKey("VehicleTracking.Domain.EventEntities.TrackingPointSnapshots", "StartPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
